#pragma once

#include <memory>

#include "Channel.hpp"
#include "Common.hpp"
#include "Epoller.hpp"
#include "Log.hpp"
#include "Reactor.hpp"
#include "Socket.hpp"
#include "inetAddr.hpp"

using namespace SocketModule;

class Listener : public Connection
{
public:
    Listener(int port = defaultport)
        : _port(port), _listensock(std::make_unique<TcpSocket>())
    {
        _listensock->BuildListenSocketMethod(port);
        SetEvent(EPOLLIN | EPOLLET);
        SetNonBlock(_listensock->Fd());
    }

    void Recver() override
    {
        // accept
        // LOG(LogLevel::DEBUG) << "进入listener模块";
        InetAddr client;
        while (true)
        {
            int sockfd = _listensock->Accept(&client);
            if (sockfd == ACCEPT_ERR)
            {
                break;
            }
            else if (sockfd == ACCEPT_CONTINUE)
            {
                continue;
            }
            else if (sockfd == ACCEPT_DONE)
            {
                break;
            }
            else
            {
                // 拿到了一个正常的fd
                std::shared_ptr<Connection> conn =
                    std::make_shared<Channel>(sockfd, client);
                conn->SetEvent(EPOLLIN);
                GetOwner()->AddConnection(conn);
                GetOwner()->PrintMap();
            }
        }
    };

    void Sender() {};

    void Excepter() {};

    void Recv() {}

    int GetSockFd() { return _listensock->Fd(); }

    ~Listener() {}

private:
    int _port;
    std::unique_ptr<Socket> _listensock;
};
